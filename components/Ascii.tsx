/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/ascii.glb --transform --types -o app/ascii/Ascii.tsx 
Files: public/ascii.glb [42.32MB] > C:\Users\Arteiro\Documents\Projetos\web\3d-grainy-textures\app\ascii\ascii-transformed.glb [1.86MB] (96%)
*/

import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import React, { useRef } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
	nodes: {
		["65e0f86b14b5e75ad0ee8b07"]: THREE.Mesh;
		["65e0f86b14b5e75ad0ee8b07001"]: THREE.Mesh;
		["65e0f86b14b5e75ad0ee8b07002"]: THREE.Mesh;
	};
	materials: {
		ID9: THREE.MeshStandardMaterial;
		ID16: THREE.MeshStandardMaterial;
		ID23: THREE.MeshStandardMaterial;
	};
};

type ContextType = Record<
	string,
	React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Ascii(props: JSX.IntrinsicElements["group"]) {
	const { nodes, materials } = useGLTF("/ascii-transformed.glb") as GLTFResult;
	const groupRef = useRef<THREE.Group>(null);

	useFrame(() => {
		// Rotate the group (or any other object) continuously
		if (groupRef.current) {
			groupRef.current.rotation.z += 0.005;
		}
	});
	return (
		<group {...props} ref={groupRef} dispose={null}>
			<mesh
				geometry={nodes["65e0f86b14b5e75ad0ee8b07"].geometry}
				material={materials.ID9}
			/>
			<mesh
				geometry={nodes["65e0f86b14b5e75ad0ee8b07001"].geometry}
				material={materials.ID16}
			/>
			<mesh
				geometry={nodes["65e0f86b14b5e75ad0ee8b07002"].geometry}
				material={materials.ID23}
			/>
		</group>
	);
}

useGLTF.preload("/ascii-transformed.glb");
